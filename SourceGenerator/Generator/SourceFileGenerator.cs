// <copyright file="SourceFileGenerator.cs" company="SeminarioIA">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>

using SourceGenerator.Generator.Types;
using System.Collections.ObjectModel;
using System.Text;

namespace SourceGenerator.Generator
{
    /// <summary>
    /// Source file generator class.
    /// </summary>
    public class SourceFileGenerator
    {
        /// <summary>
        /// The number of spaces for each identation step.
        /// </summary>
        public const int IndexationSpaces = 4;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceFileGenerator"/> class.
        /// </summary>
        /// <param name="name">The name of the new class.</param>
        /// <param name="namespace">Class namespace.</param>
        public SourceFileGenerator(string name, string @namespace)
        {
            Name = name;
            Namespace = @namespace;
            References = new Collection<string>();
            Snippets = new Collection<SourceSnippet>();
        }

        /// <summary>
        /// Gets the class name.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the class namespace name.
        /// </summary>
        public string Namespace { get; }

        /// <summary>
        /// Gets the list of references.
        /// </summary>
        public Collection<string> References { get; }

        /// <summary>
        /// Gets the list of source code snippets contained in this file.
        /// </summary>
        public Collection<SourceSnippet> Snippets { get; }

        /// <summary>
        /// Adds a new using reference to the source code.
        /// </summary>
        /// <param name="reference">The reference to add.</param>
        /// <returns>This <see cref="SourceFileGenerator"/>.</returns>
        public SourceFileGenerator AddReference(string reference)
        {
            References.Add(reference);
            return this;
        }

        /// <summary>
        /// Adds a new <see cref="ClassSource"/> to the source file.
        /// </summary>
        /// <param name="access">The <see cref="ClassAccess"/> attributes.</param>
        /// <param name="name">The <see cref="ClassSource"/> name.</param>
        /// <returns>The new added <see cref="ClassSource"/>.</returns>
        public ClassSource AddClass(ClassAccess access, string name)
        {
            var @class = new ClassSource(access, ClassScope.Normal, name);
            Snippets.Add(@class);
            return @class;
        }

        /// <summary>
        /// Adds a new <see cref="ClassSource"/> to the source file.
        /// </summary>
        /// <param name="access">The <see cref="ClassAccess"/> attributes.</param>
        /// <param name="scope">The <see cref="ClassScope"/> attributes.</param>
        /// <param name="name">The <see cref="ClassSource"/> name.</param>
        /// <returns>The new added <see cref="ClassSource"/>.</returns>
        public ClassSource AddClass(ClassAccess access, ClassScope scope, string name)
        {
            var @class = new ClassSource(access, scope, name);
            Snippets.Add(@class);
            return @class;
        }

        /// <summary>
        /// Generates the source file text into a string.
        /// </summary>
        /// <returns>The string containing the source code.</returns>
        public string Generate()
        {
            int ident = 1;
            var source = new StringBuilder(
$@"// THIS IS AN AUTOGENERATED FILE
// <copyright file=""{Name}.cs"" company=""SeminarioIA"">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>
");
            if (References.Count > 0) _ = source.AppendLine();
            foreach (string reference in References)
            {
                _ = source.AppendLine($"using {reference};");
            }

            _ = source.Append($@"
namespace {Namespace}
{{");
            foreach (SourceSnippet snippet in Snippets)
            {
                snippet.Generate(source, ident);
            }

            _ = source.AppendLine("}");
            return source.ToString();
        }
    }
}
