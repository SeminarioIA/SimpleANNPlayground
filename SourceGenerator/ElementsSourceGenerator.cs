// <copyright file="ElementsSourceGenerator.cs" company="SeminarioIA">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Diagnostics;
using System.Text;

namespace SourceGenerator
{
    /// <summary>
    /// Generates source code from the elements found in Elements folder.
    /// </summary>
    [Generator]
    public class ElementsSourceGenerator : ISourceGenerator
    {
        /// <inheritdoc/>
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the declared elements.
            var elements = ((ElementsFinder)context.SyntaxReceiver)?.Elements;

            // begin creating the source we'll inject into the users compilation
            var sourceBuilder = new StringBuilder(
@"// THIS IS AN AUTOGENERATED FILE
// <copyright file=""ElementsHelper.cs"" company=""SeminarioIA"">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>

using SimpleAnnPlayground.Graphical.Elements;

namespace SimpleAnnPlayground.Graphical
{
    /// <summary>
    /// Helper class to make operations with the Graphical Elements.
    /// </summary>
    internal static class ElementsHelper
    {
        /// <summary>
        /// Enumerates the types of Graphical Elements.
        /// </summary>
        internal enum Types
        {");
            foreach (string element in elements)
            {
                _ = sourceBuilder.Append(
$@"
            /// <summary>
            /// {element} element class.
            /// </summary>
            {element},
");
            }

            _ = sourceBuilder.Append(
@"        }

        /// <summary>
        /// Gets an array containing the types of Elements.
        /// </summary>
        internal static Type[] ElementsTypes => new Type[]
        {");
            foreach (string element in elements)
            {
                _ = sourceBuilder.Append(
$@"
            typeof({element}),");
            }

            _ = sourceBuilder.Append(
@"
        };

        /// <summary>
        /// Adds a menu item for each existing element.
        /// </summary>
        /// <param name=""item"">The menu to add the elements.</param>
        /// <param name=""clickEventHandler"">The event handler for the click action.</param>
        internal static void AddMenuPerElement(ToolStripDropDownItem item, EventHandler clickEventHandler)
        {
            // Iterate for each element type.
            foreach (Types elementType in Enum.GetValues<Types>())
            {
                // Create its correspondig menu item.
                var mnuItem = new ToolStripMenuItem
                {
                    Name = $""MnuAdd{elementType}"",
                    Text = elementType.ToString(),

                    // Store the Element type in the item Tag
                    Tag = ElementsTypes[(int)elementType],
                };

                // Add the menu item to the Add button.
                _ = item.DropDownItems.Add(mnuItem);

                // Link the click event with the passed event handler.
                mnuItem.Click += clickEventHandler;
            }
        }
    }
}
");

            // inject the created source into the users compilation
            context.AddSource("ElementsHelper", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
        }

        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            if (!Debugger.IsAttached)
            {
                // Debugger.Launch();
            }
#endif
            context.RegisterForSyntaxNotifications(() => new ElementsFinder());
        }
    }
}
