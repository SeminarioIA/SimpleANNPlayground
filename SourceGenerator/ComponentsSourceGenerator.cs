// <copyright file="ComponentsSourceGenerator.cs" company="SeminarioIA">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace SourceGenerator
{
    /// <summary>
    /// Generates source code from the elements found in Elements folder.
    /// </summary>
    [Generator]
    public class ComponentsSourceGenerator : ISourceGenerator
    {
        /// <inheritdoc/>
        public void Execute(GeneratorExecutionContext context)
        {
            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.projectdir", out string projectDirectory))
            {
#pragma warning disable CA2201 // Do not raise reserved exception types
                throw new System.Exception("Invalid build property.");
#pragma warning restore CA2201 // Do not raise reserved exception types
            }

            // Find the declared elements.
            var files = Directory.EnumerateFiles(Path.Combine(projectDirectory, @"Graphical\Components"));
            var components = files.ToList().FindAll(file => Path.GetExtension(file) == ".cmpt").ConvertAll(cmpt => Path.GetFileNameWithoutExtension(cmpt));

            var main = CreateFile("Component", "SimpleAnnPlayground.Graphical", "Helper class to make operations with the Graphical Components.");
            GenerateComponentClass(main, components);
            context.AddSource("Component", SourceText.From(main.ToString(), Encoding.UTF8));
        }

        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            if (!Debugger.IsAttached)
            {
                // Debugger.Launch();
            }
#endif
        }

        private static StringBuilder CreateFile(string name, string @namespace, string description)
        {
            // begin creating the source we'll inject into the users compilation
            return new StringBuilder(
$@"// THIS IS AN AUTOGENERATED FILE
// <copyright file=""{name}.cs"" company=""SeminarioIA"">
// Copyright (c) SeminarioIA. All rights reserved.
// </copyright>

namespace {@namespace}
{{
    /// <summary>
    /// {description}
    /// </summary>
    public partial class {name}
    {{");
        }

        private static void GenerateComponentClass(StringBuilder sourceBuilder, List<string> components)
        {
            foreach (string component in components)
            {
                _ = sourceBuilder.Append(
$@"
        /// <summary>
        /// Gets the graphical object that represents an {component}.
        /// </summary>
        internal static Component {component} {{ get; private set; }} = new Component(""{component}"");
");
            }

            _ = sourceBuilder.Append(
@"
        /// <summary>
        /// Load the components from their respective files.
        /// </summary>
        /// <param name=""path"">The path where the components are located.</param>
        internal static void ReloadComponents(string path)
        {");
            foreach (string component in components)
            {
                _ = sourceBuilder.Append(
$@"
            {component}.Deserialize(File.ReadAllText(Path.Combine(path, @""{component}.cmpt"")));");
            }

            _ = sourceBuilder.Append(
@"
        }
    }
}
");
        }
    }
}
